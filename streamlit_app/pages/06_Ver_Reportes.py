"""
HU05: Visualizar Reportes de Errores (Datos An√≥nimos)
"""
import streamlit as st
import requests
import os
import pandas as pd
from datetime import datetime
from typing import Dict, List

st.set_page_config(page_title="Ver Reportes de Errores", page_icon="üìä", layout="wide")

FASTAPI_URL = os.getenv("FASTAPI_URL", "http://localhost:8000")
API_REPORTES = f"{FASTAPI_URL}/api/v1/reportes/listar-anonimos"

st.title("üìä Reportes de Errores Registrados")
st.markdown("Visualizaci√≥n de reportes de errores con datos an√≥nimos para an√°lisis y seguimiento")

# Informaci√≥n sobre privacidad
st.info("""
üîí **Privacidad y Anonimizaci√≥n**

Los datos personales (nombres y correos electr√≥nicos) han sido anonimizados para proteger 
la privacidad de los usuarios. Solo se muestran datos t√©cnicos relevantes para el an√°lisis.
""")

# Los datos ya vienen anonimizados desde la API

# Funci√≥n para obtener reportes
@st.cache_data(ttl=300)  # Cache por 5 minutos
def obtener_reportes():
    """Obtiene los reportes desde la API"""
    try:
        response = requests.get(API_REPORTES, timeout=10)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        st.error(f"‚ùå Error al obtener reportes: {str(e)}")
        return {"reportes": [], "total": 0}

# Cargar datos
with st.spinner("Cargando reportes..."):
    data = obtener_reportes()
    reportes = data.get("reportes", [])
    total_reportes = data.get("total", 0)

if not reportes:
    st.warning("üì≠ No hay reportes registrados a√∫n.")
    st.info("Los reportes aparecer√°n aqu√≠ una vez que los usuarios comiencen a reportar errores.")
else:
    st.success(f"üìà Se encontraron **{total_reportes}** reportes registrados")
    
    # Los reportes ya vienen anonimizados desde la API
    # Crear DataFrame para an√°lisis
    df = pd.DataFrame(reportes)
    
    # Convertir fecha para an√°lisis
    df['fecha_reporte'] = pd.to_datetime(df['fecha_reporte'], errors='coerce')
    
    # Filtros
    st.subheader("üîç Filtros de B√∫squeda")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        tipo_filtro = st.selectbox(
            "Filtrar por tipo de error",
            options=["Todos"] + list(df['tipo_error'].unique()),
            key="filtro_tipo"
        )
    
    with col2:
        contacto_filtro = st.selectbox(
            "Filtrar por contacto",
            options=["Todos", "Con contacto", "Sin contacto"],
            key="filtro_contacto"
        )
    
    with col3:
        fecha_filtro = st.date_input(
            "Filtrar por fecha (desde)",
            value=None,
            key="filtro_fecha"
        )
    
    # Aplicar filtros
    df_filtrado = df.copy()
    
    if tipo_filtro != "Todos":
        df_filtrado = df_filtrado[df_filtrado['tipo_error'] == tipo_filtro]
    
    if contacto_filtro == "Con contacto":
        df_filtrado = df_filtrado[df_filtrado['tiene_contacto'] == "S√≠"]
    elif contacto_filtro == "Sin contacto":
        df_filtrado = df_filtrado[df_filtrado['tiene_contacto'] == "No"]
    
    if fecha_filtro:
        df_filtrado = df_filtrado[df_filtrado['fecha_reporte'].dt.date >= fecha_filtro]
    
    st.info(f"üìä Mostrando **{len(df_filtrado)}** reportes filtrados")
    
    # Estad√≠sticas generales
    st.subheader("üìà Estad√≠sticas Generales")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Total Reportes", len(df_filtrado))
    
    with col2:
        tipos_unicos = df_filtrado['tipo_error'].nunique()
        st.metric("Tipos de Error", tipos_unicos)
    
    with col3:
        con_contacto = len(df_filtrado[df_filtrado['tiene_contacto'] == 'S√≠'])
        st.metric("Con Contacto", con_contacto)
    
    with col4:
        sin_contacto = len(df_filtrado[df_filtrado['tiene_contacto'] == 'No'])
        st.metric("Sin Contacto", sin_contacto)
    
    # Gr√°ficos
    st.subheader("üìä An√°lisis Visual")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Gr√°fico de tipos de error
        tipo_counts = df_filtrado['tipo_error'].value_counts()
        if not tipo_counts.empty:
            st.bar_chart(tipo_counts)
            st.caption("Distribuci√≥n por tipo de error")
    
    with col2:
        # Gr√°fico de contacto
        contacto_counts = df_filtrado['tiene_contacto'].value_counts()
        if not contacto_counts.empty:
            st.bar_chart(contacto_counts)
            st.caption("Reportes con/sin informaci√≥n de contacto")
    
    # Tabla detallada
    st.subheader("üìã Lista Detallada de Reportes")
    
    # Configurar columnas para mostrar
    columnas_mostrar = ['reporte_id', 'tipo_error', 'fecha_reporte', 'tiene_contacto', 'numero_radicado']
    
    # Mostrar tabla
    st.dataframe(
        df_filtrado[columnas_mostrar],
        use_container_width=True,
        hide_index=True
    )
    
    # Expandir para ver descripci√≥n
    st.subheader("üìù Descripciones de los Reportes")
    
    for idx, reporte in df_filtrado.iterrows():
        with st.expander(f"Reporte {reporte['reporte_id']} - {reporte['tipo_error']}"):
            col1, col2 = st.columns(2)
            
            with col1:
                st.write(f"**ID:** {reporte['reporte_id']}")
                st.write(f"**Tipo:** {reporte['tipo_error']}")
                st.write(f"**Fecha:** {reporte['fecha_reporte']}")
                st.write(f"**Tiene Contacto:** {reporte['tiene_contacto']}")
                if reporte['numero_radicado'] != 'N/A':
                    st.write(f"**Radicado:** {reporte['numero_radicado']}")
            
            with col2:
                st.write("**Descripci√≥n:**")
                st.write(reporte['descripcion'])

# Informaci√≥n adicional
st.divider()

with st.expander("‚ÑπÔ∏è Informaci√≥n sobre la Visualizaci√≥n"):
    st.markdown("""
    ### ¬øQu√© informaci√≥n se muestra?
    
    - **ID del Reporte**: Identificador √∫nico para seguimiento
    - **Tipo de Error**: Categorizaci√≥n del problema reportado
    - **Fecha**: Cu√°ndo fue reportado el error
    - **Tiene Contacto**: Si el usuario proporcion√≥ datos de contacto
    - **Radicado**: N√∫mero de radicado si aplica
    - **Descripci√≥n**: Detalles del problema reportado
    
    ### ¬øPor qu√© los datos est√°n anonimizados?
    
    - **Privacidad**: Protecci√≥n de datos personales de los usuarios
    - **Cumplimiento**: Respeto a las pol√≠ticas de privacidad
    - **Enfoque**: An√°lisis t√©cnico sin exposici√≥n de informaci√≥n personal
    
    ### ¬øC√≥mo usar esta informaci√≥n?
    
    - **Identificar patrones**: Tipos de errores m√°s comunes
    - **Priorizar correcciones**: Enfocar esfuerzos en problemas frecuentes
    - **Seguimiento**: Monitorear la efectividad de las correcciones
    - **An√°lisis temporal**: Ver tendencias en el tiempo
    """)

# Bot√≥n para actualizar datos
if st.button("üîÑ Actualizar Datos", use_container_width=True):
    st.cache_data.clear()
    st.rerun()
